/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BitFlipWalletInterface extends Interface {
  functions: {
    isMetaTransactionApproved: TypedFunctionDescription<{
      encode([_h, _signer, _index, _flip, _sig]: [
        Arrayish,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    bitmaps: TypedFunctionDescription<{
      encode([,]: [string, BigNumberish]): string;
    }>;

    isBitmapSet: TypedFunctionDescription<{
      encode([_signer, _index, _flip]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    publicBroadcast: TypedFunctionDescription<{
      encode([_message, _addr, _index, _flip, _sig]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    PublicBroadcast: TypedEventDescription<{
      encodeTopics([message]: [null]): string[];
    }>;

    test: TypedEventDescription<{
      encodeTopics([stored, flip, result]: [null, null, null]): string[];
    }>;
  };
}

export class BitFlipWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BitFlipWallet;
  attach(addressOrName: string): BitFlipWallet;
  deployed(): Promise<BitFlipWallet>;

  on(event: EventFilter | string, listener: Listener): BitFlipWallet;
  once(event: EventFilter | string, listener: Listener): BitFlipWallet;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BitFlipWallet;
  removeAllListeners(eventName: EventFilter | string): BitFlipWallet;
  removeListener(eventName: any, listener: Listener): BitFlipWallet;

  interface: BitFlipWalletInterface;

  functions: {
    isMetaTransactionApproved(
      _h: Arrayish,
      _signer: string,
      _index: BigNumberish,
      _flip: BigNumberish,
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bitmaps(arg0: string, arg1: BigNumberish): Promise<BigNumber>;

    isBitmapSet(
      _signer: string,
      _index: BigNumberish,
      _flip: BigNumberish
    ): Promise<boolean>;

    publicBroadcast(
      _message: string,
      _addr: string,
      _index: BigNumberish,
      _flip: BigNumberish,
      _sig: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isMetaTransactionApproved(
    _h: Arrayish,
    _signer: string,
    _index: BigNumberish,
    _flip: BigNumberish,
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  bitmaps(arg0: string, arg1: BigNumberish): Promise<BigNumber>;

  isBitmapSet(
    _signer: string,
    _index: BigNumberish,
    _flip: BigNumberish
  ): Promise<boolean>;

  publicBroadcast(
    _message: string,
    _addr: string,
    _index: BigNumberish,
    _flip: BigNumberish,
    _sig: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    PublicBroadcast(message: null): EventFilter;

    test(stored: null, flip: null, result: null): EventFilter;
  };

  estimate: {
    isMetaTransactionApproved(
      _h: Arrayish,
      _signer: string,
      _index: BigNumberish,
      _flip: BigNumberish,
      _sig: Arrayish
    ): Promise<BigNumber>;

    bitmaps(arg0: string, arg1: BigNumberish): Promise<BigNumber>;

    isBitmapSet(
      _signer: string,
      _index: BigNumberish,
      _flip: BigNumberish
    ): Promise<BigNumber>;

    publicBroadcast(
      _message: string,
      _addr: string,
      _index: BigNumberish,
      _flip: BigNumberish,
      _sig: Arrayish
    ): Promise<BigNumber>;
  };
}
